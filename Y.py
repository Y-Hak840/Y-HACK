import base64
x = ( b'''import os
import time
os.system("clear")
b='\033[34;1m'
G='\033[32;1m'    
r='\033[31;1m'              
w='\033[37;1m'          
g='\033[34;1m'
def menu() :                             

    print(g+" __   __    _   _    _    ____ _  __   ")
    time.sleep(0.1)                                                  
    print(g+" \ \ / /   | | | |  / \  / ___| |/ / ")
    time.sleep(0.1)                                                 
    print(g+"  \ V /____| |_| | / _ \| |   | ' / ")
    time.sleep(0.1)                                                 
    print(g+"   | |_____|  _  |/ ___ \ |___| . \ ")
    time.sleep(0.1)                                                 
    print(g+"   |_|     |_| |_/_/   \_\____|_|\_\ ")  
    time.sleep(0.1)                         
    print(r+"=======================================  ")
    time.sleep(0.1)        
    print(  "\033[31;1m}          \033[34;1mWELCOME TO MY TOOL         \033[31;1m{  ")
    time.sleep(0.1)  
    print(r+"=======================================  ")
    time.sleep(0.1) 
           
    print(g+">>>>>>>>>>>>>>>sections<<<<<<<<<<<<<<<<")                                                                                                                                                                                                                                     
    time.sleep(0.1)                                 
    print("")            
    print(" \033[37;1m[\033[31;1m01\033[37;1m] \033[32;1mPkg Install")
    time.sleep(0.1)         
    print("")                                  
    print(" \033[37;1m[\033[31;1m02\033[37;1m] \033[32;1mTools Hack")
    time.sleep(0.1)
    print("")
    print(" \033[37;1m[\033[31;1m03\033[37;1m] \033[32;1mUpdate Y-Hack ")
    time.sleep(0.1) 
    print("")                                                                          
    print(" \033[37;1m[\033[31;1m04\033[37;1m] \033[32;1mAbout the programmer")
    time.sleep(0.1)                   
    print("")                  
    print(" \033[37;1m[\033[31;1m05\033[37;1m] \033[32;1mExit ")
    time.sleep(0.1)
    print("")
    print(r+"=======================================  ")
    time.sleep(0.1)
    print(  "\033[31;1m}           \033[34;1mBy : Yassa Lotfy          \033[31;1m{  ")
    time.sleep(0.1)                        
    print(r+"=======================================  ")  
    time.sleep(0.1)                                                        
loop = True                                                              
																                                                                                                                                                                                                                                    
while loop :   
     menu()                                 
     print("")                       
     Y = input(g+" WRITE YOUR OPTION ===>>> ")
                                   
     if Y == "" :
        os.system("clear")
        print("ERROR❌"*100)
        time.sleep(1)
        os.system("clear")
        time.sleep(0.2)
        menu()               
        print("")
        Y = input(g+" WRITE YOUR OPTION ===>>> ")          
        break                
               
     if Y == "4" :                                     
         os.system("clear")
         print(g+"_ __  _ __ ___   __ _ _ __ __ _ _ __ ___  _ __ ___   ___ _ __ ")
         time.sleep(0.1)
         print(g+"| '_ \| '__/ _ \ / _` | '__/ _` | '_ ` _ \| '_ ` _ \ / _ \ '__| ")
         time.sleep(0.1)
         print(g+"| |_) | | | (_) | (_| | | | (_| | | | | | | | | | | |  __/ |")
         time.sleep(0.1)
         print(g+"| .__/|_|  \___/ \__, |_|  \__,_|_| |_| |_|_| |_| |_|\___|_|")
         time.sleep(0.1)
         print(g+"|_|              |___/                                      ")
         time.sleep(0.1)        
         print(r+"==============================================================")
         time.sleep(0.1)                                                                              
         print("\033[31;1m}                          \033[34;1mWELCOME                           \033[31;1m{")
         time.sleep(0.1)                 
         print(r+"==============================================================")
         time.sleep(0.1)                                                                                                                                                 
         print("")                                                                                   
                 				                                                                                                                                                                                                                                                                                                                        
         print("\033[31;1m[+] \033[32;1mMy Name:Yassa Lotfy")
         time.sleep(0.1)  
                
         print("\033[31;1m[+] \033[32;1mMy Age: 15 Years old ")
		    	            
         time.sleep(0.1)
                                                                    
         print("\033[31;1m[+] \033[32;1mFrom: Egypt")
         time.sleep(0.1)         
         print("\033[31;1m[+] \033[32;1mprogramming languages: python  ")
         time.sleep(0.1)
                         
         print("")               
         print(w+"                  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
         time.sleep(0.1)
         print("")                                           
         print(  "                  \033[31;1m[+] \033[32;1mMy sites on social media \033[31;1m[+]")
         time.sleep(0.1)                                                   
         print("")
                  
         print(w+"                  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
         time.sleep(0.1)
         print("")
         print(  "\033[31;1m[+] \033[32;1mFacebook ===> Yassa Tech ")
         time.sleep(0.1)
                  
                                                            
         print(  "\033[31;1m[+] \033[32;1mYouTube ====> Yassa Tech ")                   
         time.sleep(0.1)                                                                                        
         print("")                                                                                     
         print(  "                  \033[31;1m[+] \033[32;1mSubscribe now to the channel \033[31;1m[+] ")
         time.sleep(0.1)
         print(r+"==============================================================")
										 									                                                     
         time.sleep(0.1)
         print("")   
         YHK = input(G+"Return to the main menu")
         if YHK =="" :
            os.system("clear")
            menu()
            print("")
            Y = input(g+" WRITE YOUR OPTION ===>>> ")
         else:
             break              
                                                         
     if Y == "1" :                             					                                                                                                                                           
       os.system("clear")
       print(g+"   ____  _           ___           _        _ _  ")
       time.sleep(0.1)   
       print(g+"  |  _ \| | ____ _  |_ _|_ __  ___| |_ __ _| | |")
       time.sleep(0.1)
       print(g+"  | |_) | |/ / _` |  | || '_ \/ __| __/ _` | | |")
       time.sleep(0.1)                                                      
       print(g+"  |  __/|   < (_| |  | || | | \__ \ || (_| | | |")
       time.sleep(0.1)                                                       
       print(g+"  |_|   |_|\_\__, | |___|_| |_|___/\__\__,_|_|_|")
       time.sleep(0.1)                                                       
       print(g+"              |___/                             ")
       time.sleep(0.1)         
       print(r+"==================================================")
       time.sleep(0.1)
       print(r+"}                                                {")
       time.sleep(0.1)
                          					  
       print(r+"==================================================")
       time.sleep(0.1)                                             
       print("")                                                                                        
                                                                                             
       print(G+" Start Install....{update}")  
       time.sleep(0.1)                          
       print("")                                            
       os.system("cd /data/data/com.termux/files/home && pkg update -y")
       time.sleep(0.1)
       print("")
       print(G+" Start Install....{upgrade}")
       time.sleep(0.1)                       
       print("")  
       os.system(" cd /data/data/com.termux/files/home && pkg install upgrade -y")
       time.sleep(0.1)
       print("")
       print(G+" Start Install....{python}")
       time.sleep(0.1)
       print("")  
       os.system(" cd /data/data/com.termux/files/home && pkg install python -y")
       time.sleep(0.1)
       print("")
       print(G+" Start Install....{python2}")
       time.sleep(0.1)
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install python2 -y")
       time.sleep(0.1)
       print("")
       print(G+" Start Install....{python3}")
       time.sleep(0.1)
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install python3")            
       time.sleep(0.1)
       print("")
       print(G+"Start Install....{java}")
       time.sleep(0.1)
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install java -y")
       time.sleep(0.1) 
       print("")
       print(G+"Start Install....{fish} ")
       time.sleep(0.1)
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install fish -y")
       time.sleep(0.1)            
       print("")
                                     
       print(G+"Start Install....{ruby}")
       time.sleep(0.1)                     
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install ruby -y")
       time.sleep(0.1)
       print("")
       print(G+"Start Install....{help}")
       time.sleep(0.1)                   
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install help -y")
       time.sleep(0.1)                
       print("")
       print(G+"Start Install....{git}")
       time.sleep(0.1)              
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install git -y")
       time.sleep(0.1)            
       print("")
       print(G+"Start Install....{host}")
       time.sleep(0.1)                
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install host -y")
       time.sleep(0.1)             
       print("")
 
       print(G+"Start Install....{php}")
       time.sleep(0.1)                 
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install php -y")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{perl}")
       time.sleep(0.1)                 
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install perl -y")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{nmap}")
       time.sleep(0.1)                 
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install nmap -y")
       time.sleep(0.1)             
       print("")
  
       print(G+"Start Install....{baah}")
       time.sleep(0.1)              
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install bash -y")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{clang}")
       time.sleep(0.1)                
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install clang -y")
       time.sleep(0.1)               
       print("")
       print(G+"Start Install....{nano}")
       time.sleep(0.1)                 
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install nano -y")
       print("")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{hydra}")
       time.sleep(0.1)               
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install hydra -y")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{figlet}")
       time.sleep(0.1)                
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install figlet -y")
       time.sleep(0.1)             
       print("")
             
       print(G+"Start Install....{cowsay}")
       time.sleep(0.1)
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install cowsay -y")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{curl}")
       time.sleep(0.1)                 
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install curl -y")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{tar}")
       time.sleep(0.1)                
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install tar -y")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{zip}")
       time.sleep(0.1)                
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install zip -y")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{unzip}")
       time.sleep(0.1)               
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install unzip -y")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{tor}")
                         
       time.sleep(0.1)                 
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install tor -y")
       time.sleep(0.1)             
       print("")
             
       print(G+"Start Install....{google}")
       time.sleep(0.1)                
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install google -y")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{wget} ")
               
       time.sleep(0.1)               
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install wget -y")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{wireshark}")
       time.sleep(0.1)
             
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install wireshark -y")
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{vpn}")
       time.sleep(0.1)                
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install vpn -y")
                
       time.sleep(0.1)             
       print("")
       print(G+"Start Install....{toilet} ")
       time.sleep(0.1)               
       print("")
                    
       os.system("cd /data/data/com.termux/files/home && pkg install toilet -y")
       time.sleep(0.1)             
       print("")
                 
       print(G+"Start Install....{proot}")
       time.sleep(0.1)               
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install proot -y")
       time.sleep(0.1)             
       print("")
                   
       print(G+"Start Install....{net tools}")
       time.sleep(0.1)
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install net tools -y")         
       time.sleep(0.1)             
       print("")
                  
       print(G+"Start Install....{golang}")
       time.sleep(0.1)                
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install golang -y")
       time.sleep(0.1)             
       print("")
                  
       print(G+"Start Install....{chroot}")
       time.sleep(0.1)                
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install chroot -y")
       time.sleep(0.1)             
       print("")
                  
       print(G+"Start Install....{macchanger}")
       time.sleep(0.1)                      
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install macchanger -y")
       time.sleep(0.1)               
       print("")
                   
       print(G+"Start Install....{openssl}")
       time.sleep(0.1)                    
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install openssl -y")
       time.sleep(0.1)                   
       print("")
                     
       print(G+"Start Install....{openssh}")
       time.sleep(0.1)                    
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install openssh -y")
       time.sleep(0.1)                   
       print("")
                    
       print(G+"Start Install....{cmatrix}")
       time.sleep(0.1)                    
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install cmatrix -y")
       time.sleep(0.1)                   
       print("")
                    
       print(G+"Start Install....{storage}")
       time.sleep(0.1)                    
       print("")  
       os.system("cd /data/data/com.termux/files/home && termux-setup-storage -y")
       time.sleep(0.1)
       print("")
                       
       print(G+"Start Install....{pip}")
       time.sleep(0.1)                 
       print("")  
       os.system("cd /data/data/com.termux/files/home && pip install --upgrade pip")
       print("")
                     
       print(G+"Start Install....{repo-root}")
       time.sleep(0.1)
       print("")  
       os.system("cd /data/data/com.termux/files/home && pkg install root-repo -y")
       print("")
             
       print(G+"Start Install....{unstable-root}")
       time.sleep(0.1)
       print("")                                                                     
       os.system("cd /data/data/com.termux/files/home && pkg install unstable-repo -y")
       print("")
       pkg = input(r+"Finsh Install All Pkgs ")
       if pkg  == "" :
          os.system("clear")
          menu()                                                                           
          print("")
          Y =input(g+" WRITE YOUR OPTION ===>>> ")
       else:          
           break                  
     
       
                                
     if Y =="3" : 
        os.system("clear")
        os.system("cd && rm -rf Y-Hack") 
        os.system("git clone https://github.com/Y-Hak840/Y-Hack")
        os.system("mv Y-Hack .. ")
        os.system("cd")
        os.system("cd Y-Hack") 
        os.system("python Y.py")
        os.system("python3 Y.py")        
                        
     
       

                                           
     if Y == "2" :                                                                                
       os.system("clear")     
       print(g+" _____           _       _   _            _   ")  
       time.sleep(0.1)                                                        
       print(g+"|_   _|__   ___ | |___  | | | | __ _  ___| | __ ")
       time.sleep(0.1) 
       print(g+"  | |/ _ \ / _ \| / __| | |_| |/ _` |/ __| |/ / ")
       time.sleep(0.1)
       print(g+"  | | (_) | (_) | \__ \ |  _  | (_| | (__|   < ")
       time.sleep(0.1)
       print(g+"  |_|\___/ \___/|_|___/ |_| |_|\__,_|\___|_|\_\ ")      
       time.sleep(0.1)                     
       print(r+"==================================================")
       time.sleep(0.1)
       print(  "\033[31;1m}                 \033[34;1mThe best tools                 \033[31;1m{")
       time.sleep(0.1)                      
       print(r+"==================================================")
       time.sleep(0.1)                                                               
       print("")                         
       print(g+"=======================")
       time.sleep(0.1)    
       print(g+"}Information Gathering{")
       time.sleep(0.1)
       print(g+"=======================")
       time.sleep(0.1)
                                                              
       print("                   \033[37;1m[\033[31;1m01\033[37;1m] \033[32;1mIPGeoLocation")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m02\033[37;1m] \033[32;1mInfo Site ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m03\033[37;1m] \033[32;1mIp-Attack ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m04\033[37;1m] \033[32;1mIp-Tracer ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m05\033[37;1m] \033[32;1mReconDog ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m06\033[37;1m] \033[32;1mRed Hawk")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m07\033[37;1m] \033[32;1mD-Tech ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m08\033[37;1m] \033[32;1mInfog ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m09\033[37;1m] \033[32;1mOsif ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m10\033[37;1m] \033[32;1mIP-FY")
       time.sleep(0.1)                                                             
       print(g+"=======================") 
       time.sleep(0.1)                   
       print(g+"}     DDos Attack     {")
       time.sleep(0.1) 
       print(g+"=======================")
       time.sleep(0.1)
                                       
       print("                   \033[37;1m[\033[31;1m11\033[37;1m] \033[32;1mGolden Eye ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m12\033[37;1m] \033[32;1mslowloris")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m13\033[37;1m] \033[32;1mHammer ")
       time.sleep(0.1)   
       print("                   \033[37;1m[\033[31;1m14\033[37;1m] \033[32;1mhulk ")
       time.sleep(0.1)                                                                            
       print(g+"=======================")
       time.sleep(0.1)
       print(g+"}      Fake Page      {")
       time.sleep(0.1)
       print(g+"=======================")
       time.sleep(0.1)                
       print("                   \033[37;1m[\033[31;1m15\033[37;1m] \033[32;1mV7x Fishing ")
                                                        
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m16\033[37;1m] \033[32;1mNexphisher")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m17\033[37;1m] \033[32;1mshellphish")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m18\033[37;1m] \033[32;1mZphisher ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m19\033[37;1m] \033[32;1m\033[32;1mWeeman ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m20\033[37;1m] \033[32;1mT-phish ")
       time.sleep(0.1)                
                                   
       print(g+"=======================")
       time.sleep(0.1)
       print(g+"}     Camera Hack     {")
       time.sleep(0.1)
       print(g+"=======================")
       time.sleep(0.1)                                        
       print("                   \033[37;1m[\033[31;1m21\033[37;1m] \033[32;1mCam Hackeras ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m22\033[37;1m] \033[32;1mSaycheese")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m23\033[37;1m] \033[32;1mCamPhish")
       time.sleep(0.1)
       print("                   \033[37;1m[\033[31;1m24\033[37;1m] \033[32;1mIpcs ")
       time.sleep(0.1)                 
                                                  
       print(g+"=======================")
       time.sleep(0.1)                  
       print(g+"}         Virus       {")
       time.sleep(0.1)
       print(g+"=======================")
       time.sleep(0.1)                      
       print("                   \033[37;1m[\033[31;1m25\033[37;1m] \033[32;1mVirtexWhatsapp")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m26\033[37;1m] \033[32;1mMrking ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m27\033[37;1m] \033[32;1mVirus4")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m28\033[37;1m] \033[32;1mVcrt")
       time.sleep(0.1)                         
       print(g+"=======================")
       time.sleep(0.1)                 
       print(g+"}         Root        {")
       time.sleep(0.1)
       print(g+"=======================")
       time.sleep(0.1)                      
       print("                   \033[37;1m[\033[31;1m29\033[37;1m] \033[32;1mTermuxApline")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m30\033[37;1m] \033[32;1mTermux-Sudo ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m31\033[37;1m] \033[32;1mFedora")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m32\033[37;1m] \033[32;1mUbuntu")
       time.sleep(0.1)                
                                                                     
       print(g+"=======================")
       time.sleep(0.1)
       print(g+"}     Termux-Style    {")
       time.sleep(0.1)
       print(g+"=======================")
       time.sleep(0.1)                      
       print("                   \033[37;1m[\033[31;1m33\033[37;1m] \033[1;92m\033[32;1mTermux-Styling-Shell-Script")
       time.sleep(0.1)                      				      
       print("                   \033[37;1m[\033[31;1m34\033[37;1m] \033[1;92m\033[32;1mTermux-ohmyzsh")
       time.sleep(0.1)                      	 
       print("                   \033[37;1m[\033[31;1m35\033[37;1m] \033[1;92m\033[32;1mTermux-style")
       time.sleep(0.1)                
                                                        
       print(g+"=======================")
       time.sleep(0.1)
       print(g+"}      Wifi Hack      {")
       time.sleep(0.1)
       print(g+"=======================")
       time.sleep(0.1)                      			    
       print("                   \033[37;1m[\033[31;1m36\033[37;1m] \033[32;1mRoutersploit ")
       time.sleep(0.1)                      			    
       print("                   \033[37;1m[\033[31;1m37\033[37;1m] \033[32;1mDraksploit ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m38\033[37;1m] \033[32;1mWifite ")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m39\033[37;1m] \033[32;1mWifite2 ")
       time.sleep(0.1)                       
                                      
       print(g+"=======================")
       time.sleep(0.1)                 
       print(g+"}      Gmail Hack     {")
       time.sleep(0.1)
       print(g+"=======================")
       time.sleep(0.1)                   
                                                   
       print("                   \033[37;1m[\033[31;1m40\033[37;1m] \033[32;1mHITTLER-HACKGM ")
       time.sleep(0.1)                            		    
       print("                   \033[37;1m[\033[31;1m41\033[37;1m] \033[32;1mGmail-Hack")
       time.sleep(0.1)                                              
       print("                   \033[37;1m[\033[31;1m42\033[37;1m] \033[32;1mHunner ")
       time.sleep(0.1)                
                                                                          
       print(g+"=======================")
       time.sleep(0.1)
       print(g+"}    Facebook Hack    {")
       time.sleep(0.1)
       print(g+"=======================")
       time.sleep(0.1)                                               
       print("                   \033[37;1m[\033[31;1m43\033[37;1m] \033[32;1mBruteForce-Facebook")
       time.sleep(0.1)                                               
       print("                   \033[37;1m[\033[31;1m44\033[37;1m] \033[32;1mBRUTEFORCnew")
       time.sleep(0.1)                                               
       print("                   \033[37;1m[\033[31;1m45\033[37;1m] \033[32;1mFacebash ")
       time.sleep(0.1)             
                                                                                                 
       print(g+"=======================")
       time.sleep(0.1)
       print(g+"}     Google Play     {")
       time.sleep(0.1)
       print(g+"=======================")
       time.sleep(0.1)                                               
       print("                   \033[37;1m[\033[31;1m46\033[37;1m] \033[32;1mZeroeye")
       time.sleep(0.1)                
       print(g+"=======================")
       time.sleep(0.1)
       print(g+"} Encrypt and decrypt {")
       time.sleep(0.1)
       print(g+"=======================")                           
       time.sleep(0.1)                                  
       print("                   \033[37;1m[\033[31;1m47\033[37;1m] \033[32;1mV7x-Tool")
       time.sleep(0.1)                        
       print("                   \033[37;1m[\033[31;1m48\033[37;1m] \033[32;1mHasher")
       time.sleep(0.1)                                                               
       print("                   \033[37;1m[\033[31;1m49\033[37;1m] \033[32;1mY-Hash   ")                                            
       time.sleep(0.1)
       print(g+"=======================")          									
       time.sleep(0.1)						         
       print(g+"}  Annoying messages  {")  
       time.sleep(0.1)
       print(g+"=======================")
       time.sleep(0.1)                                                                         
       print("                   \033[37;1m[\033[31;1m50\033[37;1m] \033[32;1mEmailboom")
       time.sleep(0.1)                                  
       print("                   \033[37;1m[\033[31;1m51\033[37;1m] \033[32;1mReborn   ")
       time.sleep(0.1)
       print("                   \033[37;1m[\033[31;1m52\033[37;1m] \033[32;1mb0mb3r  ")
       time.sleep(0.1)
       print("                   \033[37;1m[\033[31;1m53\033[37;1m] \033[32;1mTBomb")
       time.sleep(0.1)				        			    
									      									
       print(g+"=======================")               					  
       time.sleep(0.1)
       print(g+"}     Other Tools     {")
       time.sleep(0.1)   
       print(g+"=======================")
       time.sleep(0.1)
              		                                
       time.sleep(0.1)                                  
       print("                   \033[37;1m[\033[31;1m54\033[37;1m] \033[32;1mMetasploit-framework")
       time.sleep(0.1)                      			    
       print("                   \033[37;1m[\033[31;1m55\033[37;1m] \033[32;1mMetasploit")
       time.sleep(0.1)                           			 
       print("                   \033[37;1m[\033[31;1m56\033[37;1m] \033[32;1mNgrok ")	
     									       
       time.sleep(0.1)						           			
       print(g+"=======================")
       time.sleep(0.1)         				    
       print("\033[34;1m}                  \033[37;1m[\033[31;1m00\033[37;1m] \033[32;1mBack ")
       time.sleep(0.1)
       print(g+"=======================")
       time.sleep(0.1)  
       print("")      
       Tools =input(g+"WRITE YOUR OPTION ===>>> ")
     else:          
					                     
          break 
                                                        
     if Tools == "1" :           
        os.system("clear")
        print(G+"Start Install....{IPGeoLocation}")                  
        os.system("git clone https://github.com/maldevel/IPGeoLocation")
        os.system("mv IPGeoLocation ..")
        print("")
        YK = input(G+"Return to the main menu")

        if YK =="" :          
           os.system("clear")
        else:                                           
             break  
                  
                          
     elif Tools == "2" :                                           
       os.system("clear")
       print(G+"Start Install....{Info Site}")               
       os.system("git clone https://github.com/king-hacking/info-site")
       os.system("mv info-site ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break             
                       
     elif Tools == "3" :                     
       os.system("clear")
       print(G+"Start Install....{Ip-Attack}")
       os.system("git clone https://github.com/Bhai4You/Ip-Attack")
       os.system("mv Ip-Attack ..") 
       print("")                                                    
       YK = input(G+"Return to the main menu")
       if YK == "" :
          os.system("clear")
       else:
           break     
                   
     elif Tools == "4" : 
       os.system("clear")                                        
       print(G+"Start Install....{Ip-Tracer}")
       os.system("git clone https://github.com/rajkumardusad/IP-Tracer")
       os.system("mv IP-Tracer ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break       
                   
              
     elif Tools == "5" :                                                   
       os.system("clear")
       print(G+"Start Install....{ReconDog}")
       os.system("git clone https://github.com/s0md3v/ReconDog")
       os.system("mv ReconDog ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break      
                  
               
     elif Tools == "6" :                     
       os.system("clear")                                     
       print(G+"Start Install....{Red Hawk}")
       os.system("git clone https://github.com/Tuhinshubhra/RED_HAWK")
       os.system("mv RED_HAWK ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break        

               
                  
     elif Tools == "7" :                    
       os.system("clear")                                           
       print(G+"Start Install....{D-Tech}")
       os.system("git clone https://github.com/bibortone/D-Tech")
       os.system("mv D-Tech ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break       
    
                      
               
     elif Tools == "8" :
       os.system("clear")                                      
       print(G+"Start Install....{Infog}")
       os.system("git clone https://github.com/thelinuxchoice/infog ")
       os.system("mv infog ..")     
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break    
                         
                      
     elif Tools == "9" :                                              
       os.system("clear")                                       
       print(G+"Start Install....{Osif} ")
       os.system("git clone https://github.com/CiKu370/OSIF")
       os.system("mv OSIF ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:                                   
           break
     elif Tools == "10" :   
       os.system("clear")
       print(G+"Start Install....{IP-FY} ")  
       os.system("git clone https://github.com/T4P4N/IP-FY")
       os.system("mv IP-FY ..")
       print("")       
       YK = input(G+"Return to the main menu")
       if YK =="" :                             

          os.system("clear")
       else:
           break                              
                      
     elif Tools == "11" :                                               
       os.system("clear")
       print(G+"Start Install....{Golden Eye}")
       os.system("git clone https://github.com/jseidl/GoldenEye")
       os.system("mv GoldenEye ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break
             
                  
     elif Tools == "12" :                                          
       os.system("clear")
       print(G+"Start Install....{Slowloris}")
       os.system("git clone git clone https://github.com/gkbrk/slowloris.git")
       os.system("mv slowloris.git ..")
       print("")                       
       YK = input(G+"Return to the main menu")
       if YK =="" :   
          os.system("clear")
       else:
           break     
                  
               
     elif Tools == "13" :                     
       os.system("clear")                                      
       print(G+"Start Install....{Hammer}")
       os.system("git clone https://github.com/cyweb/hammer")
       os.system("mv hammer ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break	
                      
     elif Tools == "14" :              
       os.system("clear")                                                                            
       print(G+"Start Install....{hulk}")
       os.system("git clone https://github.com/grafov/hulk")
       os.system("mv hulk ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break      

               
     elif Tools == "15" :                 
       os.system("clear")                                  
       print(G+"Start Install....{V7x Fishing}")
       os.system("git clone https://github.com/Vairous7x/V7x-Fishing")
       os.system("mv V7x-Fishing ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :                                                                                
          os.system("clear")
       else:
           break              
     
                                                                  
     elif Tools == "16"  :
       os.system("clear")                                         
       print(G+"Start Install....{Nexphisher}")                      
       os.system("git clone https://github.com/htr-tech/nexphisher")
       os.system("mv nexphisher ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :                                                        
          os.system("clear")
       else:
           break                                                 
                      
     elif Tools == "17" : 
       os.system("clear")
       print(G+"Start Install....{Shellphish}")
       os.system("git clone https://github.com/thelinuxchoice/shellphish")
       os.system("mv shellphish ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break

               
     elif Tools == "18" :
       os.system("clear")                                         
       print(G+"Start Install....{Zphisher}")
       os.system("git clone https://github.com/htr-tech/zphisher")
       os.system("mv zphisher ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break      
             
               
     elif Tools == "19" :                                            
       os.system("clear")
       print(G+"Start Install....{Weeman}")
       os.system("git clone https://github.com/evait-security/weeman")
       os.system("mv weeman ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break        
                     
          
     elif Tools == "20" :                 
       os.system("clear")                                           
       print(G+"Start Install....{T-phish}")
       os.system("git clone https://github.com/Stephin-Franklin/T-Phish")
       os.system("mv T-phish ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break          
                     
          
     elif Tools == "21" :                  
       os.system("clear")                                              
       print(G+"Start Install....{Cam Hackeras}")
       os.system("git clone https://github.com/AngelSecurityTeam/Cam-Hackers")
       os.system("mv Cam-Hackers ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK == "" :                      
          os.system("clear")
       else:
           break
          
     elif Tools == "22" :                      
       os.system("clear")
       print(G+"Start Install....{Saycheese}")
       os.system("git clone https://github.com/thelinuxchoice/saycheese")
       os.system("mv saycheese ..")
       print("")  
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break          
   
     
          
     elif Tools == "23" :                      
       os.system("clear")
       print(G+"Start Install....{CamPhish}")
       os.system("git clone https://github.com/techchipnet/CamPhish")
       os.system("mv CamPhish ..")
       print("")  
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break          
   
      
     elif Tools == "24" :                   
       os.system("clear")                                             
       print(G+"Start Install....{Ipcs}")                          
       os.system("git clone https://github.com/kancotdiq/ipcs")
       os.system("mv ipcs ..")
       print("") 
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break           
    

                  
     elif Tools == "25" :               
       os.system("clear")       
       print(G+"Start Install....{VirtexWhatsapp}")
       os.system("git clone https://github.com/MR-404-FOUND/VirtexWhatsapp")
       os.system("mv VirtexWhatsapp ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break         
   
           
     elif Tools == "26" :                         
       os.system("clear")
       print(G+"Start Install....{Mrking}")                                  
       os.system("git clone https://github.com/king-hacking/MRKING")
       os.system("mv MRKING ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:                                                        
           break         
           
     elif Tools == "27" :
       os.system("clear")
       print(G+"Start Install....{Virus4}")
       os.system("git clone https://github.com/amerlaceset/Virus4")
       os.system("mv Virus4 ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")   
       else:
           break 
           
     elif Tools == "28" :
       os.system("clear")
       print(G+"Start Install....{Vcrt}")
       os.system("git clone https://github.com/LOoLzeC/vcrt")
       os.system("mv vcrt ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break   
       
               
     elif Tools == "29"  :                                    
       os.system("clear")
       print(G+"Start Install....{TermuxApline}")
       os.system("git clone https://github.com/Hax4us/TermuxAlpine")
       os.system("mv TermuxAlpine ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:     
           break           
                             
     elif Tools == "30" :                                              
       os.system("clear")
       print(G+"Start Install....{Termux-Sudo}")
       os.system("git clone https://github.com/st42/termux-sudo")
       os.system("mv termux-sudo ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break       
                                      
              
     elif Tools == "31" :                                               
       os.system("clear")
       print(G+"Start Install....{Fedora}")
       os.system("git clone https://github.com/nmilosev/termux-fedora")
       os.system("mv termux-fedora ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear") 
       else:                        
           break               
                  
          
     elif Tools == "32" :                                                  
       os.system("clear")
       print(G+"Start Install....{Ubuntu}")
       os.system("pkg install wget proot")
       os.system("git clone https://github.com/Neo-Oli/termux-ubuntu")
       os.system("mv termux-ubuntu ..")
       print("")                                                       
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:      
           break           



               
     elif Tools == "33" :                      
       os.system("clear")                                          
       print(G+"Start Install....{Termux-Styling-Shell-Script}")      
       os.system("git clone https://github.com/BagazMukti/Termux-Styling-Shell-Script")
       os.system("mv ermux-Styling-Shell-Script ..") 
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:      
           break         
    
               
     elif Tools == "34" :                                          
       os.system("clear")                          
       print(G+"Start Install....{Termux-ohmyzsh}")
       os.system("git clone https://github.com/Cabbagec/termux-ohmyzsh ")
       os.system("mv termux-ohmyzsh .. ")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:      
           break
      
                                   
     elif Tools == "35" :                        
       os.system("clear")
       print(G+"Start Install....{Termux-style}")
       os.system("git clone https://github.com/adi1090x/termux-style")
       os.system("mv termux-style ..")
       print("")              
       YK = input(G+"Return to the main menu")
       if YK =="" :                                                             
          os.system("clear")                                            
       else:
           break         
                  

                                                                    
               
     elif Tools == "36"  : 
       os.system("clear")
       print(G+"Start Install....{Routersploit}")
       os.system("git clone https://github.com/threat9/routersploit")
       os.system("mv routersploit ..") 
       print("")         
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break     
             
             
     elif Tools == "37" :                                                
       os.system("clear")
       print(G+"Start Install....{Darksploit}")
       os.system("git clone https://github.com/anthrax3/DarkSploit")
       os.system("mv DarkSploit ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break             
                  
                  
             
                                                                  
     elif Tools == "38" :                      
       os.system("clear")
       print(G+"Start Install....{Wifite}")
       os.system("git clone https://github.com/derv82/wifite")
       os.system("mv wifite ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:      
           break            
                  
          
     elif Tools == "39" :                                        
       os.system("clear")
       print(G+"Start Install....{Wifite2}")
       os.system("git clone https://github.com/derv82/wifite2 ")
       os.system("mv wifite2 ..")
       print("")
       YK = input(G+"Return to the main menu")                                   
       if YK =="" :
          os.system("clear")
       else:      
           break     
     

             
               
     elif Tools == "40" :                  
       os.system("clear")
       print(G+"Start Install....{HITTLER-HACKGM")
       os.system("git clone https://github.com/hitlerhack313/HITLER-HACK-GM4U20")
       os.system("mv HITLER-HACK-GM4U20 ..")
       print("")                                            
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:      
           break            
    
          
     elif Tools == "41" :
       os.system("clear")   
       print(G+"Start Installing....{Gmail-Hack}")                               
       os.system("git clone https://github.com/Ha3MrX/Gemail-Hack")
       os.system("mv Gemail-Hack ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:
           break          
 

                 
     elif Tools == "42"  :                                           
       os.system("clear")
       print(G+"Start Installing....{Hunner}")
       os.system("git clone https://github.com/b3-v3r/Hunner ")
       os.system("mv Hunner ..")
       print("")    
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:      
           break
                  
          
     elif Tools == "43" :        
       os.system("clear")   
       print(G+"Start Installing....{BruteForce-Facebook}")
       os.system("git clone https://github.com/hickin-hack/BruteForce-Facebook")
       os.system("mv BruteForce-Facebook ..") 
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:      
           break 
     
  
       
               
             
     elif Tools == "44" :
       os.system("clear")                                                            
       print(G+"Start Installing....{BRUTEFORCnew}")
       os.system("git clone https://github.com/FR13ND8/BRUTEFORCEnew")
       os.system("mv BRUTEFORCEnew ..")
       print("") 
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")
       else:      
           break  
       
                     
     elif Tools == "45" :           
       os.system("clear")     
       print(G+"Start Installing....{Facebash}")     
       os.system("git clone https://github.com/thelinuxchoice/facebash")
       os.system("mv facebash ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK =="" :
          os.system("clear")  
       else:                               
           break                                         

          
     elif Tools == "46" :                                                 
       os.system("clear")
       print(G+"Start Installing....{Zeroeye}")
       os.system("git clone https://github.com/skolldz/zeroeye")
       os.system("mv zeroeye .. ")
       print("")                                                   
       YK = input(G+"Return to the main menu") 
       if YK == "" :                         
          os.system("clear")
       else:      
           break            
                                            
     
          
     elif Tools == "47" :                                          
       os.system("clear")
       print(G+"Start Installing....{V7x-Tool}")                 
       os.system("git clone https://github.com/Vairous7x/V7x-Tool")
       os.system("mv V7x-Tool ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK == "" :
          os.system("clear")
       else:      
           break         
     
               
     elif Tools == "48" :                     
       os.system("clear")
       print(G+"Start Installing....{Hasher}")
       os.system("git clone https://github.com/CiKu370/hasher")
       os.system("mv hasher ..")
       print("")                                                  
       YK = input(G+"Return to the main menu")
       if YK == "" :
          os.system("clear")
       break          
     if Tools == "49" :
        os.system("clear")
        print(G+"Start Installing....{Y-Hash}")                              
        os.system("git clone https://github.com/Y-Hak840/Y-Hash")
        os.system("mv Y-Hash .. ")
        print("")
        YK = input(G+"Return to the main menu")
        if YK == "" :
           os.system("clear")            
        else:
            break           
     if Tools == "50" :                    
        os.system("clear")                                    
        print(G+"Start Installing....{Emailboom}")               
        os.system("git clone https://github.com/sumanmanna6111/Emailboom")
        os.system("mv Emailboom ..")
        print("")
        YK = input(G+"Return to the main menu")
        if YK == "" :
           os.system("clear")
        else:      
            break       

     if Tools == "51" :
        os.system("clear")
        print(G+"Start Installing....{Reborn}")
        os.system("git clone https://github.com/4nat/Reborn ")
        os.system("mv Reborn ..")
        print("")
        YK = input(G+"Return to the main menu")
        if YK == "" :
           os.system("clear")                   
        else:
            break

     if Tools == "52" :
        os.system("clear")
        print(G+"Start Installing....{b0mb3r}")
        os.system("git clone https://github.com/Tr3blef/b0mb3r")
        os.system("mv b0mb3r ..")
        print("")
        YK = input(G+"Return to the main menu")
        if YK == "":
           os.system("clear")
        else:
            break

     if Tools == "53" :
        os.system("clear")
        print(G+"Start Installing....{TBomb}")
        os.system("git clone https://github.com/TheSpeedX/TBomb")
        os.system("mv TBomb ..")
        print("")
        YK = input(G+"Return to the main menu")
        if YK == "":
           os.system("clear")
        else:
            break
     elif Tools == "54" :                                                  
       os.system("clear")
       print(G+"Start Installing....{Metasploit-framework}")
       os.system("git clone https://github.com/rapid7/metasploit-framework")
       os.system("mv metasploit-framework ..")
       print("")
       YK = input(G+"Return to the main menu")
       if YK == "" :
          os.system("clear")
       else:      
           break
                         
  
     elif Tools == "55" :                                                                
       os.system("clear")
       print(G+"Start Installing....{Metasploit}")
       os.system("cd..&& pkg install metasploit")
       print("")
       YK = input(G+"Return to the main menu")
       if YK == "" :
          os.system("clear")
       else:      
           break  
  
     if Tools == "56" :
        os.system("clear")
        print(G+"[01] install the tool on kali")
        print("")
        print(G+"[02] install the tool on termux")
        print("")
        n = input(g+" WRITE YOUR OPTION ===>>> ")
        if n == "1" :
           os.system("clear")
           print(G+"Start Installing....{ngrok}")    			  
           os.system("cd ..&& sudo apt install nodejs -y")
           os.system("cd ..&& sudo npm install ngrok -g")
           print("")
           YK = input(G+"Return to the main menu")
           if YK == "":
              os.system("clear")
           else:
               break
        elif n == "2" :
           os.system("clear")
           print(G+"Start Installing....{ngrok}")    			  
           os.system("cd ..&& pkg install nodejs-lts  -y")
           os.system("cd ..&& npm install ngrok -g")
           print("")
           YK = input(G+"Return to the main menu")
           if YK == "":
              os.system("clear")
           else:
               break
        					                                
     if Tools == "0" : 
        os.system("clear")
       				
	
     if Tools == "" :
        os.system("clear")
        print("ERROR❌"*100)
        time.sleep(1)
        os.system("clear")
        time.sleep(0.2)     

     
''' )
exec (base64.b64decode(x))